pipeline {
    agent any

    environment {
        // Nom de l'image Docker
        registry = "debora/docker-backend-mlops" 
        dockerImage = ''  
        registryCredential = ''  // Credentials Docker Hub
        STAGING = 'mlops-flight-delay' // Nom de l'application Heroku
    }

    stages {
        // Checkout
        stage('Checkout') {
            steps {
                checkout([
                    $class: 'GitSCM', 
                    branches: [[name: '*/main']],  // Utilisez un nom de branche sp√©cifique
                    extensions: [], 
                    userRemoteConfigs: [[credentialsId: '542b643c-b8d3-4cbb-9682-93de6d49338b', url: 'https://dagshub.com/deb.gnuito/MLOPS.git']]
                ])
            }
        }
        
        // Building Docker image
        stage('Building image') {
            steps {
                script {
                    dockerImage = docker.build(registry, "./backend") 
                }
            }
        }

        // Stopping Docker containers for cleaner Docker run
        stage('Docker stop container') {
            steps {
                sh 'docker ps -f name=container-backend-mlops -q | xargs --no-run-if-empty docker container stop'
                sh 'docker container ls -a -f name=container-backend-mlops -q | xargs --no-run-if-empty docker container rm'
            }
        }

        // Running Docker container
        stage('Docker Run') {
            steps {
                script {
                    dockerImage.run("-e PORT=8081 -p 8081:8081 --rm --name backend-api")
                }
            }
        }

        // Deploy to Heroku
        stage('Deploy Heroku') {
            steps {
                script {
                    sh '''
                    cd backend
                    heroku container:login
                    heroku apps:info -a $STAGING || heroku create $STAGING
                    heroku container:push -a $STAGING web
                    heroku container:release -a $STAGING web
                    '''
                }
            }
        }
    }
}
